// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "comm.proto" (package "comm", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 *  Basic
 *
 * @generated from protobuf message comm.BasicRequest
 */
export interface BasicRequest {
}
/**
 * @generated from protobuf message comm.BasicResponse
 */
export interface BasicResponse {
    /**
     * @generated from protobuf field: int32 code = 1;
     */
    code: number;
    /**
     * @generated from protobuf field: string message = 2;
     */
    message: string;
}
/**
 * @generated from protobuf message comm.GetValueRequest
 */
export interface GetValueRequest {
    /**
     * @generated from protobuf field: string key = 1;
     */
    key: string;
}
/**
 * @generated from protobuf message comm.GetValueResponse
 */
export interface GetValueResponse {
    /**
     * @generated from protobuf field: int32 code = 1;
     */
    code: number;
    /**
     * @generated from protobuf field: string message = 2;
     */
    message: string;
    /**
     * @generated from protobuf field: string value = 3;
     */
    value: string;
}
/**
 * @generated from protobuf message comm.GetLogsResponse
 */
export interface GetLogsResponse {
    /**
     * @generated from protobuf field: int32 code = 1;
     */
    code: number;
    /**
     * @generated from protobuf field: string message = 2;
     */
    message: string;
    /**
     * @generated from protobuf field: repeated comm.Entry value = 3;
     */
    value: Entry[];
}
/**
 * @generated from protobuf message comm.SetValueRequest
 */
export interface SetValueRequest {
    /**
     * @generated from protobuf field: string key = 1;
     */
    key: string;
    /**
     * @generated from protobuf field: string value = 2;
     */
    value: string;
}
/**
 * @generated from protobuf message comm.SetValueResponse
 */
export interface SetValueResponse {
    /**
     * @generated from protobuf field: int32 code = 1;
     */
    code: number;
    /**
     * @generated from protobuf field: string message = 2;
     */
    message: string;
    /**
     * @generated from protobuf field: string value = 3;
     */
    value: string;
}
/**
 * @generated from protobuf message comm.StrlnValueRequest
 */
export interface StrlnValueRequest {
    /**
     * @generated from protobuf field: string key = 1;
     */
    key: string;
}
/**
 * @generated from protobuf message comm.StrlnValueResponse
 */
export interface StrlnValueResponse {
    /**
     * @generated from protobuf field: int32 code = 1;
     */
    code: number;
    /**
     * @generated from protobuf field: string message = 2;
     */
    message: string;
    /**
     * @generated from protobuf field: int32 value = 3;
     */
    value: number;
}
/**
 * @generated from protobuf message comm.DeleteValueRequest
 */
export interface DeleteValueRequest {
    /**
     * @generated from protobuf field: string key = 1;
     */
    key: string;
}
/**
 * @generated from protobuf message comm.DeleteValueResponse
 */
export interface DeleteValueResponse {
    /**
     * @generated from protobuf field: int32 code = 1;
     */
    code: number;
    /**
     * @generated from protobuf field: string message = 2;
     */
    message: string;
    /**
     * @generated from protobuf field: string value = 3;
     */
    value: string;
}
/**
 * @generated from protobuf message comm.AppendValueRequest
 */
export interface AppendValueRequest {
    /**
     * @generated from protobuf field: string key = 1;
     */
    key: string;
    /**
     * @generated from protobuf field: string value = 2;
     */
    value: string;
}
/**
 * @generated from protobuf message comm.AppendValueResponse
 */
export interface AppendValueResponse {
    /**
     * @generated from protobuf field: int32 code = 1;
     */
    code: number;
    /**
     * @generated from protobuf field: string message = 2;
     */
    message: string;
    /**
     * @generated from protobuf field: string value = 3;
     */
    value: string;
}
/**
 * Raft
 *
 * @generated from protobuf message comm.Entry
 */
export interface Entry {
    /**
     * @generated from protobuf field: int32 term = 1;
     */
    term: number;
    /**
     * @generated from protobuf field: string key = 2;
     */
    key: string;
    /**
     * @generated from protobuf field: string value = 3;
     */
    value: string;
    /**
     * @generated from protobuf field: int32 command = 4;
     */
    command: number;
}
/**
 * @generated from protobuf message comm.AppendEntriesRequest
 */
export interface AppendEntriesRequest {
    /**
     * @generated from protobuf field: int32 term = 1;
     */
    term: number;
    /**
     * @generated from protobuf field: int32 leaderId = 2;
     */
    leaderId: number;
    /**
     * @generated from protobuf field: int32 prevLogIndex = 3;
     */
    prevLogIndex: number;
    /**
     * @generated from protobuf field: int32 prevLogTerm = 4;
     */
    prevLogTerm: number;
    /**
     * @generated from protobuf field: repeated comm.Entry entries = 5;
     */
    entries: Entry[];
    /**
     * @generated from protobuf field: int32 leaderCommit = 6;
     */
    leaderCommit: number;
}
/**
 * @generated from protobuf message comm.AppendEntriesResponse
 */
export interface AppendEntriesResponse {
    /**
     * @generated from protobuf field: int32 term = 1;
     */
    term: number;
    /**
     * @generated from protobuf field: bool success = 2;
     */
    success: boolean;
}
/**
 * @generated from protobuf message comm.RequestVoteRequest
 */
export interface RequestVoteRequest {
    /**
     * @generated from protobuf field: int32 term = 1;
     */
    term: number;
    /**
     * @generated from protobuf field: int32 candidateId = 2;
     */
    candidateId: number;
    /**
     * @generated from protobuf field: int32 lastLogIndex = 3;
     */
    lastLogIndex: number;
    /**
     * @generated from protobuf field: int32 lastLogTerm = 4;
     */
    lastLogTerm: number;
}
/**
 * @generated from protobuf message comm.RequestVoteResponse
 */
export interface RequestVoteResponse {
    /**
     * @generated from protobuf field: int32 term = 1;
     */
    term: number;
    /**
     * @generated from protobuf field: bool voteGranted = 2;
     */
    voteGranted: boolean;
}
/**
 * @generated from protobuf message comm.ChangeMembershipRequest
 */
export interface ChangeMembershipRequest {
    /**
     * @generated from protobuf field: string newClusterAddresses = 1;
     */
    newClusterAddresses: string;
}
/**
 * @generated from protobuf message comm.ChangeMembershipResponse
 */
export interface ChangeMembershipResponse {
    /**
     * @generated from protobuf field: int32 code = 1;
     */
    code: number;
    /**
     * @generated from protobuf field: string message = 2;
     */
    message: string;
    /**
     * @generated from protobuf field: string value = 3;
     */
    value: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class BasicRequest$Type extends MessageType<BasicRequest> {
    constructor() {
        super("comm.BasicRequest", []);
    }
    create(value?: PartialMessage<BasicRequest>): BasicRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<BasicRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BasicRequest): BasicRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: BasicRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message comm.BasicRequest
 */
export const BasicRequest = new BasicRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BasicResponse$Type extends MessageType<BasicResponse> {
    constructor() {
        super("comm.BasicResponse", [
            { no: 1, name: "code", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BasicResponse>): BasicResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.code = 0;
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<BasicResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BasicResponse): BasicResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 code */ 1:
                    message.code = reader.int32();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BasicResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 code = 1; */
        if (message.code !== 0)
            writer.tag(1, WireType.Varint).int32(message.code);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message comm.BasicResponse
 */
export const BasicResponse = new BasicResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetValueRequest$Type extends MessageType<GetValueRequest> {
    constructor() {
        super("comm.GetValueRequest", [
            { no: 1, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetValueRequest>): GetValueRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.key = "";
        if (value !== undefined)
            reflectionMergePartial<GetValueRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetValueRequest): GetValueRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string key */ 1:
                    message.key = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetValueRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string key = 1; */
        if (message.key !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.key);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message comm.GetValueRequest
 */
export const GetValueRequest = new GetValueRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetValueResponse$Type extends MessageType<GetValueResponse> {
    constructor() {
        super("comm.GetValueResponse", [
            { no: 1, name: "code", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetValueResponse>): GetValueResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.code = 0;
        message.message = "";
        message.value = "";
        if (value !== undefined)
            reflectionMergePartial<GetValueResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetValueResponse): GetValueResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 code */ 1:
                    message.code = reader.int32();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                case /* string value */ 3:
                    message.value = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetValueResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 code = 1; */
        if (message.code !== 0)
            writer.tag(1, WireType.Varint).int32(message.code);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        /* string value = 3; */
        if (message.value !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message comm.GetValueResponse
 */
export const GetValueResponse = new GetValueResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetLogsResponse$Type extends MessageType<GetLogsResponse> {
    constructor() {
        super("comm.GetLogsResponse", [
            { no: 1, name: "code", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "value", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Entry }
        ]);
    }
    create(value?: PartialMessage<GetLogsResponse>): GetLogsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.code = 0;
        message.message = "";
        message.value = [];
        if (value !== undefined)
            reflectionMergePartial<GetLogsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetLogsResponse): GetLogsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 code */ 1:
                    message.code = reader.int32();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                case /* repeated comm.Entry value */ 3:
                    message.value.push(Entry.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetLogsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 code = 1; */
        if (message.code !== 0)
            writer.tag(1, WireType.Varint).int32(message.code);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        /* repeated comm.Entry value = 3; */
        for (let i = 0; i < message.value.length; i++)
            Entry.internalBinaryWrite(message.value[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message comm.GetLogsResponse
 */
export const GetLogsResponse = new GetLogsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetValueRequest$Type extends MessageType<SetValueRequest> {
    constructor() {
        super("comm.SetValueRequest", [
            { no: 1, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SetValueRequest>): SetValueRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.key = "";
        message.value = "";
        if (value !== undefined)
            reflectionMergePartial<SetValueRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetValueRequest): SetValueRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string key */ 1:
                    message.key = reader.string();
                    break;
                case /* string value */ 2:
                    message.value = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetValueRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string key = 1; */
        if (message.key !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.key);
        /* string value = 2; */
        if (message.value !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message comm.SetValueRequest
 */
export const SetValueRequest = new SetValueRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetValueResponse$Type extends MessageType<SetValueResponse> {
    constructor() {
        super("comm.SetValueResponse", [
            { no: 1, name: "code", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SetValueResponse>): SetValueResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.code = 0;
        message.message = "";
        message.value = "";
        if (value !== undefined)
            reflectionMergePartial<SetValueResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetValueResponse): SetValueResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 code */ 1:
                    message.code = reader.int32();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                case /* string value */ 3:
                    message.value = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetValueResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 code = 1; */
        if (message.code !== 0)
            writer.tag(1, WireType.Varint).int32(message.code);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        /* string value = 3; */
        if (message.value !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message comm.SetValueResponse
 */
export const SetValueResponse = new SetValueResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StrlnValueRequest$Type extends MessageType<StrlnValueRequest> {
    constructor() {
        super("comm.StrlnValueRequest", [
            { no: 1, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StrlnValueRequest>): StrlnValueRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.key = "";
        if (value !== undefined)
            reflectionMergePartial<StrlnValueRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StrlnValueRequest): StrlnValueRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string key */ 1:
                    message.key = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StrlnValueRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string key = 1; */
        if (message.key !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.key);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message comm.StrlnValueRequest
 */
export const StrlnValueRequest = new StrlnValueRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StrlnValueResponse$Type extends MessageType<StrlnValueResponse> {
    constructor() {
        super("comm.StrlnValueResponse", [
            { no: 1, name: "code", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "value", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<StrlnValueResponse>): StrlnValueResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.code = 0;
        message.message = "";
        message.value = 0;
        if (value !== undefined)
            reflectionMergePartial<StrlnValueResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StrlnValueResponse): StrlnValueResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 code */ 1:
                    message.code = reader.int32();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                case /* int32 value */ 3:
                    message.value = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StrlnValueResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 code = 1; */
        if (message.code !== 0)
            writer.tag(1, WireType.Varint).int32(message.code);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        /* int32 value = 3; */
        if (message.value !== 0)
            writer.tag(3, WireType.Varint).int32(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message comm.StrlnValueResponse
 */
export const StrlnValueResponse = new StrlnValueResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteValueRequest$Type extends MessageType<DeleteValueRequest> {
    constructor() {
        super("comm.DeleteValueRequest", [
            { no: 1, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteValueRequest>): DeleteValueRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.key = "";
        if (value !== undefined)
            reflectionMergePartial<DeleteValueRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteValueRequest): DeleteValueRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string key */ 1:
                    message.key = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteValueRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string key = 1; */
        if (message.key !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.key);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message comm.DeleteValueRequest
 */
export const DeleteValueRequest = new DeleteValueRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteValueResponse$Type extends MessageType<DeleteValueResponse> {
    constructor() {
        super("comm.DeleteValueResponse", [
            { no: 1, name: "code", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteValueResponse>): DeleteValueResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.code = 0;
        message.message = "";
        message.value = "";
        if (value !== undefined)
            reflectionMergePartial<DeleteValueResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteValueResponse): DeleteValueResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 code */ 1:
                    message.code = reader.int32();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                case /* string value */ 3:
                    message.value = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteValueResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 code = 1; */
        if (message.code !== 0)
            writer.tag(1, WireType.Varint).int32(message.code);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        /* string value = 3; */
        if (message.value !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message comm.DeleteValueResponse
 */
export const DeleteValueResponse = new DeleteValueResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AppendValueRequest$Type extends MessageType<AppendValueRequest> {
    constructor() {
        super("comm.AppendValueRequest", [
            { no: 1, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AppendValueRequest>): AppendValueRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.key = "";
        message.value = "";
        if (value !== undefined)
            reflectionMergePartial<AppendValueRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AppendValueRequest): AppendValueRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string key */ 1:
                    message.key = reader.string();
                    break;
                case /* string value */ 2:
                    message.value = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AppendValueRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string key = 1; */
        if (message.key !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.key);
        /* string value = 2; */
        if (message.value !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message comm.AppendValueRequest
 */
export const AppendValueRequest = new AppendValueRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AppendValueResponse$Type extends MessageType<AppendValueResponse> {
    constructor() {
        super("comm.AppendValueResponse", [
            { no: 1, name: "code", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AppendValueResponse>): AppendValueResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.code = 0;
        message.message = "";
        message.value = "";
        if (value !== undefined)
            reflectionMergePartial<AppendValueResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AppendValueResponse): AppendValueResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 code */ 1:
                    message.code = reader.int32();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                case /* string value */ 3:
                    message.value = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AppendValueResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 code = 1; */
        if (message.code !== 0)
            writer.tag(1, WireType.Varint).int32(message.code);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        /* string value = 3; */
        if (message.value !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message comm.AppendValueResponse
 */
export const AppendValueResponse = new AppendValueResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Entry$Type extends MessageType<Entry> {
    constructor() {
        super("comm.Entry", [
            { no: 1, name: "term", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "command", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<Entry>): Entry {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.term = 0;
        message.key = "";
        message.value = "";
        message.command = 0;
        if (value !== undefined)
            reflectionMergePartial<Entry>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Entry): Entry {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 term */ 1:
                    message.term = reader.int32();
                    break;
                case /* string key */ 2:
                    message.key = reader.string();
                    break;
                case /* string value */ 3:
                    message.value = reader.string();
                    break;
                case /* int32 command */ 4:
                    message.command = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Entry, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 term = 1; */
        if (message.term !== 0)
            writer.tag(1, WireType.Varint).int32(message.term);
        /* string key = 2; */
        if (message.key !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.key);
        /* string value = 3; */
        if (message.value !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.value);
        /* int32 command = 4; */
        if (message.command !== 0)
            writer.tag(4, WireType.Varint).int32(message.command);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message comm.Entry
 */
export const Entry = new Entry$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AppendEntriesRequest$Type extends MessageType<AppendEntriesRequest> {
    constructor() {
        super("comm.AppendEntriesRequest", [
            { no: 1, name: "term", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "leaderId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "prevLogIndex", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "prevLogTerm", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "entries", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Entry },
            { no: 6, name: "leaderCommit", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<AppendEntriesRequest>): AppendEntriesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.term = 0;
        message.leaderId = 0;
        message.prevLogIndex = 0;
        message.prevLogTerm = 0;
        message.entries = [];
        message.leaderCommit = 0;
        if (value !== undefined)
            reflectionMergePartial<AppendEntriesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AppendEntriesRequest): AppendEntriesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 term */ 1:
                    message.term = reader.int32();
                    break;
                case /* int32 leaderId */ 2:
                    message.leaderId = reader.int32();
                    break;
                case /* int32 prevLogIndex */ 3:
                    message.prevLogIndex = reader.int32();
                    break;
                case /* int32 prevLogTerm */ 4:
                    message.prevLogTerm = reader.int32();
                    break;
                case /* repeated comm.Entry entries */ 5:
                    message.entries.push(Entry.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int32 leaderCommit */ 6:
                    message.leaderCommit = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AppendEntriesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 term = 1; */
        if (message.term !== 0)
            writer.tag(1, WireType.Varint).int32(message.term);
        /* int32 leaderId = 2; */
        if (message.leaderId !== 0)
            writer.tag(2, WireType.Varint).int32(message.leaderId);
        /* int32 prevLogIndex = 3; */
        if (message.prevLogIndex !== 0)
            writer.tag(3, WireType.Varint).int32(message.prevLogIndex);
        /* int32 prevLogTerm = 4; */
        if (message.prevLogTerm !== 0)
            writer.tag(4, WireType.Varint).int32(message.prevLogTerm);
        /* repeated comm.Entry entries = 5; */
        for (let i = 0; i < message.entries.length; i++)
            Entry.internalBinaryWrite(message.entries[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* int32 leaderCommit = 6; */
        if (message.leaderCommit !== 0)
            writer.tag(6, WireType.Varint).int32(message.leaderCommit);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message comm.AppendEntriesRequest
 */
export const AppendEntriesRequest = new AppendEntriesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AppendEntriesResponse$Type extends MessageType<AppendEntriesResponse> {
    constructor() {
        super("comm.AppendEntriesResponse", [
            { no: 1, name: "term", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<AppendEntriesResponse>): AppendEntriesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.term = 0;
        message.success = false;
        if (value !== undefined)
            reflectionMergePartial<AppendEntriesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AppendEntriesResponse): AppendEntriesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 term */ 1:
                    message.term = reader.int32();
                    break;
                case /* bool success */ 2:
                    message.success = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AppendEntriesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 term = 1; */
        if (message.term !== 0)
            writer.tag(1, WireType.Varint).int32(message.term);
        /* bool success = 2; */
        if (message.success !== false)
            writer.tag(2, WireType.Varint).bool(message.success);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message comm.AppendEntriesResponse
 */
export const AppendEntriesResponse = new AppendEntriesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RequestVoteRequest$Type extends MessageType<RequestVoteRequest> {
    constructor() {
        super("comm.RequestVoteRequest", [
            { no: 1, name: "term", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "candidateId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "lastLogIndex", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "lastLogTerm", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<RequestVoteRequest>): RequestVoteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.term = 0;
        message.candidateId = 0;
        message.lastLogIndex = 0;
        message.lastLogTerm = 0;
        if (value !== undefined)
            reflectionMergePartial<RequestVoteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestVoteRequest): RequestVoteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 term */ 1:
                    message.term = reader.int32();
                    break;
                case /* int32 candidateId */ 2:
                    message.candidateId = reader.int32();
                    break;
                case /* int32 lastLogIndex */ 3:
                    message.lastLogIndex = reader.int32();
                    break;
                case /* int32 lastLogTerm */ 4:
                    message.lastLogTerm = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RequestVoteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 term = 1; */
        if (message.term !== 0)
            writer.tag(1, WireType.Varint).int32(message.term);
        /* int32 candidateId = 2; */
        if (message.candidateId !== 0)
            writer.tag(2, WireType.Varint).int32(message.candidateId);
        /* int32 lastLogIndex = 3; */
        if (message.lastLogIndex !== 0)
            writer.tag(3, WireType.Varint).int32(message.lastLogIndex);
        /* int32 lastLogTerm = 4; */
        if (message.lastLogTerm !== 0)
            writer.tag(4, WireType.Varint).int32(message.lastLogTerm);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message comm.RequestVoteRequest
 */
export const RequestVoteRequest = new RequestVoteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RequestVoteResponse$Type extends MessageType<RequestVoteResponse> {
    constructor() {
        super("comm.RequestVoteResponse", [
            { no: 1, name: "term", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "voteGranted", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<RequestVoteResponse>): RequestVoteResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.term = 0;
        message.voteGranted = false;
        if (value !== undefined)
            reflectionMergePartial<RequestVoteResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestVoteResponse): RequestVoteResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 term */ 1:
                    message.term = reader.int32();
                    break;
                case /* bool voteGranted */ 2:
                    message.voteGranted = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RequestVoteResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 term = 1; */
        if (message.term !== 0)
            writer.tag(1, WireType.Varint).int32(message.term);
        /* bool voteGranted = 2; */
        if (message.voteGranted !== false)
            writer.tag(2, WireType.Varint).bool(message.voteGranted);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message comm.RequestVoteResponse
 */
export const RequestVoteResponse = new RequestVoteResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangeMembershipRequest$Type extends MessageType<ChangeMembershipRequest> {
    constructor() {
        super("comm.ChangeMembershipRequest", [
            { no: 1, name: "newClusterAddresses", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChangeMembershipRequest>): ChangeMembershipRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.newClusterAddresses = "";
        if (value !== undefined)
            reflectionMergePartial<ChangeMembershipRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangeMembershipRequest): ChangeMembershipRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string newClusterAddresses */ 1:
                    message.newClusterAddresses = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChangeMembershipRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string newClusterAddresses = 1; */
        if (message.newClusterAddresses !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.newClusterAddresses);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message comm.ChangeMembershipRequest
 */
export const ChangeMembershipRequest = new ChangeMembershipRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangeMembershipResponse$Type extends MessageType<ChangeMembershipResponse> {
    constructor() {
        super("comm.ChangeMembershipResponse", [
            { no: 1, name: "code", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChangeMembershipResponse>): ChangeMembershipResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.code = 0;
        message.message = "";
        message.value = "";
        if (value !== undefined)
            reflectionMergePartial<ChangeMembershipResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangeMembershipResponse): ChangeMembershipResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 code */ 1:
                    message.code = reader.int32();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                case /* string value */ 3:
                    message.value = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChangeMembershipResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 code = 1; */
        if (message.code !== 0)
            writer.tag(1, WireType.Varint).int32(message.code);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        /* string value = 3; */
        if (message.value !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message comm.ChangeMembershipResponse
 */
export const ChangeMembershipResponse = new ChangeMembershipResponse$Type();
/**
 * @generated ServiceType for protobuf service comm.CommService
 */
export const CommService = new ServiceType("comm.CommService", [
    { name: "Ping", options: {}, I: BasicRequest, O: BasicResponse },
    { name: "Status", options: {}, I: BasicRequest, O: BasicResponse },
    { name: "Stop", options: {}, I: BasicRequest, O: BasicResponse },
    { name: "GetLogs", options: {}, I: BasicRequest, O: GetLogsResponse },
    { name: "GetValue", options: {}, I: GetValueRequest, O: GetValueResponse },
    { name: "SetValue", options: {}, I: SetValueRequest, O: SetValueResponse },
    { name: "StrlnValue", options: {}, I: StrlnValueRequest, O: StrlnValueResponse },
    { name: "DeleteValue", options: {}, I: DeleteValueRequest, O: DeleteValueResponse },
    { name: "AppendValue", options: {}, I: AppendValueRequest, O: AppendValueResponse },
    { name: "ChangeMembership", options: {}, I: ChangeMembershipRequest, O: ChangeMembershipResponse },
    { name: "AppendEntries", options: {}, I: AppendEntriesRequest, O: AppendEntriesResponse },
    { name: "RequestVote", options: {}, I: RequestVoteRequest, O: RequestVoteResponse }
]);
