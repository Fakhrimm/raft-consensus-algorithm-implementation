// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "comm.proto" (package "comm", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { CommService } from "./comm";
import type { RequestVoteResponse } from "./comm";
import type { RequestVoteRequest } from "./comm";
import type { AppendEntriesResponse } from "./comm";
import type { AppendEntriesRequest } from "./comm";
import type { ChangeMembershipResponse } from "./comm";
import type { ChangeMembershipRequest } from "./comm";
import type { AppendValueResponse } from "./comm";
import type { AppendValueRequest } from "./comm";
import type { DeleteValueResponse } from "./comm";
import type { DeleteValueRequest } from "./comm";
import type { StrlnValueResponse } from "./comm";
import type { StrlnValueRequest } from "./comm";
import type { SetValueResponse } from "./comm";
import type { SetValueRequest } from "./comm";
import type { GetValueResponse } from "./comm";
import type { GetValueRequest } from "./comm";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { BasicResponse } from "./comm";
import type { BasicRequest } from "./comm";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service comm.CommService
 */
export interface ICommServiceClient {
    /**
     * @generated from protobuf rpc: Ping(comm.BasicRequest) returns (comm.BasicResponse);
     */
    ping(input: BasicRequest, options?: RpcOptions): UnaryCall<BasicRequest, BasicResponse>;
    /**
     * @generated from protobuf rpc: Stop(comm.BasicRequest) returns (comm.BasicResponse);
     */
    stop(input: BasicRequest, options?: RpcOptions): UnaryCall<BasicRequest, BasicResponse>;
    /**
     * @generated from protobuf rpc: GetValue(comm.GetValueRequest) returns (comm.GetValueResponse);
     */
    getValue(input: GetValueRequest, options?: RpcOptions): UnaryCall<GetValueRequest, GetValueResponse>;
    /**
     * @generated from protobuf rpc: SetValue(comm.SetValueRequest) returns (comm.SetValueResponse);
     */
    setValue(input: SetValueRequest, options?: RpcOptions): UnaryCall<SetValueRequest, SetValueResponse>;
    /**
     * @generated from protobuf rpc: StrlnValue(comm.StrlnValueRequest) returns (comm.StrlnValueResponse);
     */
    strlnValue(input: StrlnValueRequest, options?: RpcOptions): UnaryCall<StrlnValueRequest, StrlnValueResponse>;
    /**
     * @generated from protobuf rpc: DeleteValue(comm.DeleteValueRequest) returns (comm.DeleteValueResponse);
     */
    deleteValue(input: DeleteValueRequest, options?: RpcOptions): UnaryCall<DeleteValueRequest, DeleteValueResponse>;
    /**
     * @generated from protobuf rpc: AppendValue(comm.AppendValueRequest) returns (comm.AppendValueResponse);
     */
    appendValue(input: AppendValueRequest, options?: RpcOptions): UnaryCall<AppendValueRequest, AppendValueResponse>;
    /**
     * @generated from protobuf rpc: ChangeMembership(comm.ChangeMembershipRequest) returns (comm.ChangeMembershipResponse);
     */
    changeMembership(input: ChangeMembershipRequest, options?: RpcOptions): UnaryCall<ChangeMembershipRequest, ChangeMembershipResponse>;
    /**
     * Raft
     *
     * @generated from protobuf rpc: AppendEntries(comm.AppendEntriesRequest) returns (comm.AppendEntriesResponse);
     */
    appendEntries(input: AppendEntriesRequest, options?: RpcOptions): UnaryCall<AppendEntriesRequest, AppendEntriesResponse>;
    /**
     * @generated from protobuf rpc: RequestVote(comm.RequestVoteRequest) returns (comm.RequestVoteResponse);
     */
    requestVote(input: RequestVoteRequest, options?: RpcOptions): UnaryCall<RequestVoteRequest, RequestVoteResponse>;
}
/**
 * @generated from protobuf service comm.CommService
 */
export class CommServiceClient implements ICommServiceClient, ServiceInfo {
    typeName = CommService.typeName;
    methods = CommService.methods;
    options = CommService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Ping(comm.BasicRequest) returns (comm.BasicResponse);
     */
    ping(input: BasicRequest, options?: RpcOptions): UnaryCall<BasicRequest, BasicResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<BasicRequest, BasicResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Stop(comm.BasicRequest) returns (comm.BasicResponse);
     */
    stop(input: BasicRequest, options?: RpcOptions): UnaryCall<BasicRequest, BasicResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<BasicRequest, BasicResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetValue(comm.GetValueRequest) returns (comm.GetValueResponse);
     */
    getValue(input: GetValueRequest, options?: RpcOptions): UnaryCall<GetValueRequest, GetValueResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetValueRequest, GetValueResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SetValue(comm.SetValueRequest) returns (comm.SetValueResponse);
     */
    setValue(input: SetValueRequest, options?: RpcOptions): UnaryCall<SetValueRequest, SetValueResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetValueRequest, SetValueResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: StrlnValue(comm.StrlnValueRequest) returns (comm.StrlnValueResponse);
     */
    strlnValue(input: StrlnValueRequest, options?: RpcOptions): UnaryCall<StrlnValueRequest, StrlnValueResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<StrlnValueRequest, StrlnValueResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteValue(comm.DeleteValueRequest) returns (comm.DeleteValueResponse);
     */
    deleteValue(input: DeleteValueRequest, options?: RpcOptions): UnaryCall<DeleteValueRequest, DeleteValueResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteValueRequest, DeleteValueResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: AppendValue(comm.AppendValueRequest) returns (comm.AppendValueResponse);
     */
    appendValue(input: AppendValueRequest, options?: RpcOptions): UnaryCall<AppendValueRequest, AppendValueResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<AppendValueRequest, AppendValueResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ChangeMembership(comm.ChangeMembershipRequest) returns (comm.ChangeMembershipResponse);
     */
    changeMembership(input: ChangeMembershipRequest, options?: RpcOptions): UnaryCall<ChangeMembershipRequest, ChangeMembershipResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<ChangeMembershipRequest, ChangeMembershipResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Raft
     *
     * @generated from protobuf rpc: AppendEntries(comm.AppendEntriesRequest) returns (comm.AppendEntriesResponse);
     */
    appendEntries(input: AppendEntriesRequest, options?: RpcOptions): UnaryCall<AppendEntriesRequest, AppendEntriesResponse> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<AppendEntriesRequest, AppendEntriesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RequestVote(comm.RequestVoteRequest) returns (comm.RequestVoteResponse);
     */
    requestVote(input: RequestVoteRequest, options?: RpcOptions): UnaryCall<RequestVoteRequest, RequestVoteResponse> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<RequestVoteRequest, RequestVoteResponse>("unary", this._transport, method, opt, input);
    }
}
